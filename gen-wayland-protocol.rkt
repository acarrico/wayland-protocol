#lang racket/base
(require xml)
(require racket/match)
(require racket/pretty)
(require racket/generic)
(require racket/list)

(require "gen-libwayland-client.rkt")
(require "gen-libwayland-server.rkt")
(require "gen-libc.rkt")

;; Configuration:
(define wayland-share (or (getenv "wayland_share") "/usr/share/wayland/"))
(define wayland-lib (or (getenv "wayland_lib") ""))
(define libc-dir (or (getenv "libc_lib") ""))

;; ISSUE: Assuming the XML is correct, for example not checking for
;; missing destructor, more than one new id argument, etc. But if C is
;; successfully generating code from the XML, this should too.

(define (About-parse what attrs content)
  (define name (find-attribute-value attrs 'name))
  (match content
    ((list (element _ _ 'description
                    (list-no-order (attribute _ _ 'summary summary))
                    desc-content)
           content* ...)
     (values (About what name summary (pcdata-content->string desc-content)) content*))
    (_
     (values (About what name #f #f) content))))

(struct About (what name summary description) #:transparent)

(define (Protocol-dump p client-test-out server-test-out)
  (for ((i (Protocol-interfaces p))) (Interface-dump i client-test-out server-test-out)))

(define (Protocol-parse doc)
  (define-values (name doc-content)
    (match (cleanup (document-element doc))
      ((element _ _ 'protocol
                (list-no-order (attribute _ _ 'name name))
                content)
       (values name content))
      (_ (error "Protocol-parse: expected a protocol root element"))))

  (define-values (maybe-copyright more-elements)
    (maybe-element 'copyright doc-content))

  (define interface-elements
    (match more-elements
      ((list (and interfaces (element _ _ 'interface _ _)) ...)
       interfaces)
      (_ (error "Protocol-parse: expected interface elements"))))

  (Protocol name (map Interface-parse interface-elements)))

(struct Protocol (name interfaces) #:transparent)

(define (Interface-parse elem)
  (define-values (attrs content) (parse-element elem 'interface))
  (define-values (about content*) (About-parse 'INTERFACE attrs content))
  (define-values (requests events enums)
    (for/fold ((requests '())
               (events '())
               (enums '()))
              ((elem content*))
      (match elem
        ((element _ _ 'request _ _)
         (values (cons (Request-parse elem) requests) events enums))
        ((element _ _ 'event _ _)
         (values requests (cons (Event-parse elem) events) enums))
        ((element _ _ 'enum _ _)
         (values requests events (cons (Enum-parse elem) enums)))
        (_ (error "Interface-parse: expected a request, event, or enum" elem)))))
  (Interface
   about
   (find-attribute-value attrs 'version)
   (reverse requests)
   (reverse events)
   (reverse enums)))

(define test-header
  "\
#lang racket/base

;;; NOTE: THIS IS AN AUTOGENERATED FILE
")

(define (Interface-dump i client-test-out server-test-out)
  (define name (About-name (Interface-about i)))
  (define client-module-path (interface-name->client-module-path name))
  (define server-module-path (interface-name->server-module-path name))
  (define client-path (interface-name->client-path name))
  (define server-path (interface-name->server-path name))
  (pretty-write `(require ,(string->symbol client-module-path)) client-test-out)
  (pretty-write `(require ,(string->symbol server-module-path)) server-test-out)
  (call-with-output-file
    client-path
    (lambda (client-out)
      (call-with-output-file
        server-path
        (lambda (server-out)
          (Interface-dump* i server-out client-out))
        #:mode 'text #:exists 'replace))
    #:mode 'text #:exists 'replace))

(define server-header "\
#lang racket/base

;;; NOTE: THIS IS AN AUTOGENERATED FILE

(require ffi/unsafe ffi/unsafe/define)
(require wayland-0/generated/libwayland-server
         wayland-0/util
         wayland-0/private
         wayland-0/server)

(define-ffi-definer define-wl-server libwayland-server)
")

(define client-header "\
#lang racket/base

;;; NOTE: THIS IS AN AUTOGENERATED FILE

(require ffi/unsafe ffi/unsafe/define)

(require wayland-0/generated/libwayland-client
         wayland-0/util
         wayland-0/private
         wayland-0/client)

(define-ffi-definer define-wl-client libwayland-client)
")

;; NOTE: On the client side, this is an alias for a proxy. Not sure if
;; there is a concete version on the server side, maybe wl_object or
;; wl_resource. Careful, things different on each side!

(define (interface-name->client-module-path n)
  (format "wayland-0/generated/~a-client" n))

(define (interface-name->client-filename n)
  (format "~a-client.rkt" n))

(define (interface-name->client-path n)
  (format "wayland-0/generated/~a" (interface-name->client-filename n)))

(define (interface-name->server-module-path n)
  (format "wayland-0/generated/~a-server" n))

(define (interface-name->server-filename n)
  (format "~a-server.rkt" n))

(define (interface-name->server-path n)
  (format "wayland-0/generated/~a" (interface-name->server-filename n)))

(define (interface-name->object-descriptor-name s)
  (format "~a_interface" s))

(define (interface-name->pointer-name s)
  (format "_~a-pointer" s))

(define (object-name i)
  (About-name (Interface-about i)))

(define (object-type-name i)
  (string-append "_" (object-name i)))

(define (object-pointer-name i)
  (string-append (object-type-name i) "-pointer"))

(define (object-pointer/null-name i)
  (string-append (object-type-name i) "-pointer/null"))

(define (object-descriptor-name i)
  (interface-name->object-descriptor-name (object-name i)))

(define (object-client-interface-name i)
  (format "~a_listener" (object-name i)))
(define (object-client-interface-type-name i)
  (format "_~a" (object-client-interface-name i)))

(define (object-add-listener-name i)
  (format "~a-add-listener" (object-name i)))

;; NOTE: struct _*_interface in C.
(define (object-server-interface-name i)
  (format "~a_implementation" (object-name i)))
(define (object-server-interface-type-name i)
  (format "_~a" (object-server-interface-name i)))

(define (opcode-name i m)
  (format "~a-~a-opcode" (object-name i) (Message-name m)))

(define (opcode-version-name i m)
  (format "~a-~a-since-version" (object-name i) (Message-name m)))

(define (event-wrapper-name i m)
  (format "~a-send-~a" (object-name i) (Message-name m)))

(define (set-user-data-name i)
  (format "~a-set-user-data" (object-name i)))

(define (get-user-data-name i)
  (format "~a-get-user-data" (object-name i)))

(define (Interface-has-destroy-message i)
  (for/or ((m (map Request-message (Interface-requests i))))
    (string=? (Message-name m) "destroy")))

(define (Interface-destroy-name i)
  (format "~a-destroy" (object-name i)))

(define (stub-name i m)
  (format "~a-~a" (object-name i) (Message-name m)))

(define (Interface-dump* i server-out client-out)
  (match i
    ((Interface (and about (About what name summary description)) ver requests events enums)
     (define event-messages (map Event-message events))
     (define request-messages (map Request-message requests))

     (display server-header server-out)
     (display client-header client-out)

     (define-values (client-requires server-requires) (Interface-get-requires i))
     (when (not (empty? client-requires))
       (newline client-out)
       (pretty-write `(require ,@client-requires) client-out))
     (when (not (empty? server-requires))
       (newline server-out)
       (pretty-write `(require ,@server-requires) server-out))

     (define-values (client-provides server-provides) (Interface-get-provides i))
     (newline client-out)
     (pretty-display `(provide ,@client-provides) client-out)
     (newline server-out)
     (pretty-display `(provide ,@server-provides) server-out)

     (for ((out (list client-out server-out)))
       (newline out)
       (pretty-display
        `(define ,(object-pointer-name i) (_cpointer ',(object-type-name i)))
        out)
       (pretty-display
        `(define ,(object-pointer/null-name i) (_cpointer/null ',(object-type-name i)))
        out))

     (pretty-display
      `(define-wl-client ,(object-descriptor-name i) _wl_interface)
      client-out)
     (pretty-display
      `(define-wl-server ,(object-descriptor-name i) _wl_interface)
      server-out)

     (for* ((out (list client-out server-out))
            (e enums))
       (Enum-dump e name out))

     (for ((out (list client-out server-out))
           (server? (list #f #t))
           (cstruct-name (list (object-client-interface-type-name i)
                               (object-server-interface-type-name i)))
           (messages (list event-messages request-messages)))
       (unless (empty? messages)
         (newline out)
         (if summary
             (fprintf out ";;; ~a â€” ~a\n" name summary)
             (fprintf out ";;; ~a\n" name))
         (for ((m messages)) (Message-dump-comment m name server? out))

         (when server?
           (fprintf out ";;;
;;; NOTE: _~a_interface in C is _~a_implementation in racket due to a
;;; name clash, and anyway it is confusing to overload the name.\n"
                    name name))

         (pretty-display
          `(define-cstruct ,cstruct-name
             ,(for/list ((m messages))
                (list
                 (Message-name m)
                 (Message-type-form m i server?)))
             #:malloc-mode 'raw)
          out)

         (when (not server?)
           (newline out)
           (pretty-display
            `(define (,(object-add-listener-name i) ,(object-name i) listener data)
               (wl_proxy_add_listener
                (cast ,(object-name i) ,(object-pointer-name i) _wl_proxy-pointer)
                ;; NOTE: technically (cast listener _wl_registry_listener-pointer (void (**)(void)) )
                listener
                data))
            out))))

     ;; Emit opcodes
     (for ((out (list client-out server-out))
           (messages (list request-messages event-messages)))
       (unless (empty? messages)
         (newline out))
       (for ((opcode (in-naturals))
             (message messages))
         (pretty-display `(define ,(opcode-name i message) ,opcode) out)))

     ;; Emit opcode versions
     (unless (empty? event-messages)
       (newline server-out)
       (for ((message event-messages))
         (pretty-display `(define ,(opcode-version-name i message) ,(Message-since message))
                         server-out)))

     ;; server event wrappers
     (for ((m event-messages))
       ;; NOTE: wl_display functions should be hand written.
       (unless (string=? name "wl_display")
         (Message-wrapper m i server-out)))

     ;; client
     (newline client-out)
     (pretty-display
      `(define (,(set-user-data-name i) ,name user-data)
         (wl_proxy_set_user_data ,name user-data))
      client-out)
     (newline client-out)
     (pretty-display
      `(define (,(get-user-data-name i) ,name)
         (wl_proxy_set_user_data ,name))
      client-out)

     (when (and (not (Interface-has-destroy-message i))
                (not (string=? name "wl_display")))
       (newline client-out)
       (pretty-display
        `(define (,(Interface-destroy-name i) ,name) (wl_proxy_destroy ,name))
        client-out))
     (for ((m request-messages))
       (Message-stub m i client-out))

     )))

(define (Interface-get-requires i)
  (define request-messages (map Request-message (Interface-requests i)))
  (define event-messages (map Event-message (Interface-events i)))
  (values
   ;; client
   (map
    interface-name->client-filename
    (remove
     (object-name i)
     (remove-duplicates
      (for*/fold ((interface-names '()))
                 ((m request-messages)
                  (a (Message-args m)))
        (match a
          ((struct* Arg ((type "new_id")
                         (interface-name (? string? interface-name))))
           (cons interface-name interface-names))
          (_ interface-names))))))
    ;; server
   '()))

(define (Interface-get-provides i)
  (define request-messages (map Request-message (Interface-requests i)))
  (define event-messages (map Event-message (Interface-events i)))
  (values
   ;; client
   (append
    (list (object-pointer-name i)
          (object-pointer/null-name i)
          (object-descriptor-name i)
          `(struct-out ,(object-client-interface-name i))
          (object-add-listener-name i))
    (for/list ((m request-messages))
      (opcode-name i m))
    (list (set-user-data-name i) (get-user-data-name i))
    (if (and (not (Interface-has-destroy-message i))
             (not (string=? (object-name i) "wl_display")))
        (list (Interface-destroy-name i))
        '())
    (for/list ((m request-messages)) (stub-name i m))
    )
   ;; server
   (append
    (list (object-pointer-name i)
          (object-pointer/null-name i)
          (object-descriptor-name i))
    (if (empty? request-messages)
        '()
        `(struct-out ,(object-server-interface-name i)))
    (for/list ((m event-messages))
      (opcode-name i m))
    (for/list ((m event-messages))
      (opcode-version-name i m))

    (if (string=? (object-name i) "wl_display")
        ;; NOTE: wl_display functions should be hand written.
        '()
        (for/list ((m event-messages))
          ;; server event wrappers
          (event-wrapper-name i m))))))

(struct Interface (about version requests events enums) #:transparent)

(define (Message-type-form m interface server?)
  (match m
    ((Message (About what message-name summary description) destructor? since args)
     `(_fun
       ,@(reverse
          (for/fold ((types (reverse
                             (if server?
                                 (list '_wl_client-pointer '_wl_resource-pointer)
                                 (list '_pointer (object-pointer-name interface))))))
                    ((arg (Message-args m)))
            (match arg
              ((Arg about type summary interface-name allow-null)
               (cond ((and server? (equal? type "object"))
                      (cons '_wl_resource-pointer types))
                     ((and server? (equal? type "new_id") (not interface-name))
                      (append (reverse '(_string/utf-8 _uint32 _uint32)) types))
                     ((and (not server?) (equal? type "object") (not interface-name))
                      (cons '_pointer types))
                     ((and (not server?) (equal? type "new_id"))
                      (cons (format "_~a-pointer" interface-name) types))
                     (else
                      (cons (Arg-type-form arg) types)))))))

       -> _void))))

(define (Message-dump-comment m interface-name server? out)
  (match m
    ((Message (About what message-name summary description) destructor? since args)
     ;; (define name (format "~a-~a" interface-name message-name))
     (if summary
         (fprintf out ";;;   ~a â€” ~a\n" message-name summary)
         (fprintf out ";;;   ~a\n" message-name))
     (for ((arg args))
       (match arg
         ((Arg (About what arg-name desc-summary description) type arg-summary interface-name allow-null)
          (when (and server? (equal? type "new_id") (not interface-name))
            (fprintf out ";;;     interface â€” name of the object's interface\n")
            (fprintf out ";;;     version â€” version of the object's interface\n"))
          (if arg-summary
              (fprintf out ";;;     ~a â€” ~a\n" arg-name arg-summary)
              (fprintf out ";;;     ~a\n" arg-name)))))
     (when (> since 1)
         (fprintf out ";;;   since: ~a\n" since)))))

(define (Message-wrapper m interface out)
  (newline out)
  (match m
    ((Message (About what message-name summary description) destructor? since args)
     (pretty-display
      `(define (,(event-wrapper-name interface m)
                resource_
                ,@(map Arg-name args))
         (wl_resource_post_event resource_ ,(opcode-name interface m) ,@(map Arg-name args)))
      out))))

(define (gen-initialize-arg-form type index init-form)
  (match type
    ("int" `(set-wl_argument-i! (ptr-ref args _wl_argument ,index) ,init-form))
    ("uint" `(set-wl_argument-u! (ptr-ref args _wl_argument ,index) ,init-form))
    ("fixed" `(set-wl_argument-f! (ptr-ref args _wl_argument ,index) ,init-form))
    ("string" `(set-wl_argument-s! (ptr-ref args _wl_argument ,index) ,init-form))
    ("array" `(set-wl_argument-a! (ptr-ref args _wl_argument ,index) ,init-form))
    ("fd" `(set-wl_argument-h! (ptr-ref args _wl_argument ,index) ,init-form))
    ("new_id" `(set-wl_argument-o! (ptr-ref args _wl_argument ,index) ,init-form))
    ("object" `(set-wl_argument-o! (ptr-ref args _wl_argument ,index) ,init-form))))

(define (Message-stub m interface out)
  (newline out)
  (match m
    ((Message (About what message-name summary description) destructor? since args)

     (define param-names (reverse
                          (for/fold ((reverse-args '()))
                                    ((a args))
                            (match a
                              ((struct* Arg ((type "new_id") (interface-name #f)))
                               (append (reverse '(interface version)) reverse-args))
                              ((struct* Arg ((type "new_id")))
                               reverse-args)
                              (_
                               (cons (Arg-name a) reverse-args))))))

     (define arg-count
       (for/fold ((arg-count 0))
                 ((a args))
         (+ arg-count
            (match a
              ((struct* Arg ((type "new_id") (interface-name #f))) 3)
              ((struct* Arg ((type "new_id"))) 1)
              (_ 1)))))

     (define new-id-arg?
       (for/or ((a args)) (and (string=? (Arg-type a) "new_id") a)))

     (define allocate-args-form
       `(define args (cast (malloc 'raw (* ,arg-count (ctype-sizeof _wl_argument)))
                           _pointer
                           _wl_argument-pointer)))

     (define initialize-args-forms
       (let-values
           (((end-index reverse-forms)
             (for/fold ((index 0)
                        (forms '()))
                       ((a args))
               (match a
                 ((struct* Arg ((type "new_id") (interface-name #f)))
                  (values
                   (+ index 3)
                   (append
                    (reverse
                     (list
                      (gen-initialize-arg-form "int" index '(wl_interface-name interface))
                      (gen-initialize-arg-form "uint" (+ index 1) 'version)
                      (gen-initialize-arg-form "new_id" (+ index 2) #f)))
                    forms)))
                 ((struct* Arg ((type "new_id")))
                  (values
                   (+ index 1)
                   (cons (gen-initialize-arg-form "new_id" index #f) forms)))
                 ((struct* Arg ((about (struct* About ((name arg-name)))) (type type)))
                  (values
                   (+ index 1)
                   (cons (gen-initialize-arg-form type index arg-name) forms)))))))
         (reverse reverse-forms)))

     (pretty-display
      `(define (,(stub-name interface m) ,(object-name interface) ,@param-names)
         ,allocate-args-form
         ,@initialize-args-forms
         ,(match new-id-arg?
            ((struct* Arg ((about (struct* About ((name arg-name))))
                           (interface-name interface-name)))
              `(define ,arg-name
                 (wl_proxy_marshal_array_constructor
                  (cast ,(object-name interface)
                        ,(object-pointer-name interface)
                        _wl_proxy-pointer)
                  ,(opcode-name interface m)
                  args
                  ,(if interface-name
                       (interface-name->object-descriptor-name interface-name)
                       "interface"))))
            (_
             `(wl_proxy_marshal_array
               ,(object-name interface)
               ,(opcode-name interface m)
               args)))
         (free args)
         ,@(if destructor?
               `((wl_proxy_destroy ,(object-name interface)))
               '())
         ,(match new-id-arg?
            ((struct* Arg ((about (struct* About ((name arg-name))))
                           (interface-name interface-name)))
             `(cast ,arg-name _wl_proxy-pointer
                    ,(if interface-name
                         (interface-name->pointer-name interface-name)
                         '_void)))
            (_
             '(void))))

      out)

     )))

(define (Message-name m) (About-name (Message-about m)))

(struct Message (about destructor? since args) #:transparent)

(define (Request-parse elem)
  (define-values (attrs content) (parse-element elem 'request))
  (define-values (about content*) (About-parse 'REQUEST attrs content))
  (define type? (maybe-find-attribute-value attrs 'type))
  (Request
   (Message about
            (and type? (equal? type? "destructor"))
            (string->number (or (maybe-find-attribute-value attrs 'since) "1"))
            (map Arg-parse content*))))

(struct Request (message) #:transparent)

(define (Event-parse elem)
  (define-values (attrs content) (parse-element elem 'event))
  (define-values (about content*) (About-parse 'EVENT attrs content))
  (Event
   (Message about
            #f
            (string->number (or (maybe-find-attribute-value attrs 'since) "1"))
            (map Arg-parse content*))))

(struct Event (message) #:transparent)

(define (Enum-dump e interface-name out)
  (match e
    ((Enum (About what enum-name summary description) since entries)
     (define name (format "~a-~a" interface-name enum-name))

     (newline out)

     (if summary
         (fprintf out ";;; enum ~a â€” ~a\n" name summary)
         (fprintf out ";;; enum ~a\n" name))

     (for ((entry entries))
       (Entry-dump-comment entry name out))

     (for ((entry entries))
       (Entry-dump entry name out)))))

(define (Enum-parse elem)
  (define-values (attrs content) (parse-element elem 'enum))
  (define-values (about content*) (About-parse 'ENUM attrs content))
  (Enum about
        (maybe-find-attribute-value attrs 'since)
        (map parse-entry content*)))

(struct Enum (about since entries) #:transparent)

(define (Arg-parse elem)
  (define-values (attrs content) (parse-element elem 'arg))
  (define-values (about content*) (About-parse 'ARG attrs content))
  (define allow-null (maybe-find-attribute-value attrs 'allow-null))
  (Arg about
       (find-attribute-value attrs 'type)
       (maybe-find-attribute-value attrs 'summary)
       (maybe-find-attribute-value attrs 'interface)
       (and allow-null (equal? "allow-null" "true"))))

(define (Arg-type-form a)
  (match a
    ((Arg (About what name about-summary description)
           type arg-summary interface-name allow-null)
     (match type
       ("int" '_int32)
       ("uint" '_uint32)
       ("fixed" '_wl_fixed)
       ("string" '_string/utf-8)
       ("array" '_wl_array-pointer)
       ("fd" '_int32)
       ("new_id" '_uint32)
       ("object" (string->symbol (format "~a-pointer" interface-name)))))))

(define (Arg-name a) (About-name (Arg-about a)))

(struct Arg (about type summary interface-name allow-null) #:transparent)

(define (Entry-dump-comment e prefix out)
  (match e
    ((Entry (About what entry-name about-summary description) value summary since)
     (if summary
         (fprintf out ";;;   ~a â€” ~a\n" entry-name summary)
         (fprintf out ";;;   ~a\n" entry-name)))))

(define (Entry-dump e prefix out)
  (match e
    ((Entry (About what entry-name about-summary description) value summary since)
     (define name (format "~a-~a" prefix entry-name))

     (pretty-display `(define ,name ,value) out))))

(struct Entry (about value summary since) #:transparent)

(define cleanup (eliminate-whitespace '(copyright description) not))

(define (pcdata-content->string content)
  (apply string-append (map pcdata-string content)))

(define (parse-element elem name)
  (match elem
    ((element _ _ (? (lambda (x) (eq? name x))) attrs content)
     (values attrs content))
    (_ (error "parse-element: expected" name elem))))

(define (maybe-element name content)
  (match content
    ((list
      (and name-element (element _ _ (? (lambda (x) (eq? name x))) _ _))
      content ...)
     (values name-element content))
    (_
     (values #f content))))

(define (maybe-find-attribute-value attrs name)
  (match attrs
    ((list-no-order (attribute _ _ (? (lambda (x) (eq? name x))) val) _ ...)
     val)
    (_ #f)))

(define (find-attribute-value attrs name)
  (match attrs
    ((list-no-order (attribute _ _ (? (lambda (x) (eq? name x))) val) _ ...)
     val)
    (_ (error "find-attribute-value: missing attribute") attrs name)))

(define (convert-attr-value s)
  (match s
    ((regexp #px"0x([[:xdigit:]]+)" (list _ hex-digits))
     (string->symbol (string-append "#x" hex-digits)))
    ((regexp #px"[[:digit:]]+" (list digits))
     (string->symbol digits))
    (_
     (error "convert-attr-value: unrecognized syntax"))))

(define (parse-entry elem)
  (define-values (attrs content) (parse-element elem 'entry))
  (define-values (about content*) (About-parse 'ENTRY attrs content))
  (Entry about
         (convert-attr-value (find-attribute-value attrs 'value))
         (maybe-find-attribute-value attrs 'summary)
         (maybe-find-attribute-value attrs 'since)))

(define wayland-protocol
  (Protocol-parse
   (call-with-input-file (string-append wayland-share "wayland.xml")
     read-xml #:mode 'text)))

(call-with-output-file
  "wayland-0/generated/client-test.rkt"
  (lambda (client-test-out)
    (call-with-output-file
      "wayland-0/generated/server-test.rkt"
      (lambda (server-test-out)
        (display test-header client-test-out)
        (newline client-test-out)
        (display test-header server-test-out)
        (newline server-test-out)
        (Protocol-dump wayland-protocol client-test-out server-test-out))
      #:mode 'text #:exists 'replace))
  #:mode 'text #:exists 'replace)

(gen-libwayland-client wayland-lib)
(gen-libwayland-server wayland-lib)
(gen-libc libc-dir)
