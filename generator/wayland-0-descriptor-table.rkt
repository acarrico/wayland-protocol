#lang at-exp racket/base

(require "wayland-ast.rkt"
         "util.rkt")

(require racket/pretty)
(require racket/list)
(require racket/format)
(require racket/match)
(require racket/function)

(provide dump-descriptor-table)

(define (dump-descriptor-table protocol)
  (define interfaces (Protocol-interfaces protocol))
  (for ((server? '(#t #f)))
    (call-with-output-file
      (descriptor-table-path server?)
      (curry dump interfaces server?)
      #:mode 'text #:exists 'replace)))

(define (descriptor-table-module server?)
  (string->symbol
   (format "wayland-0/generated/descriptor-table-~a"
           (server?->string server?))))

(define (descriptor-table-filename server?)
  (format "descriptor-table-~a.rkt" (server?->string server?)))

(define (descriptor-table-path server?)
  (format "wayland-0/generated/~a" (descriptor-table-filename server?)))

(define (descriptor-table-typed-path server?)
  (format "typed/wayland-0/generated/~a" (descriptor-table-filename server?)))

(define (descriptor-table-entry i)
  (list (string->symbol (Interface-name i))
        (string->symbol ".")
        (string->symbol ",")
        (interface-descriptor-name i)))

(define (dump interfaces server? out)
  (define interface-modules
    (map (lambda (i) (interface-typed-module i server?)) interfaces))
  (define descriptor-table
    (map descriptor-table-entry interfaces))

  (display @~a{#lang typed/racket/base

               ;;; NOTE: THIS IS AN AUTOGENERATED FILE

               }
           out)
  (pretty-write `(require ,@interface-modules) out)
  (newline out)
  (pretty-write `(provide descriptor-table) out)
  (newline out)
  (pretty-display `(define descriptor-table ,(cons 'quasiquote (list descriptor-table))) out)
  (newline out))
