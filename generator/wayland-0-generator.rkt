#lang at-exp racket/base

(require "wayland-ast.rkt"
         "wayland-0-types.rkt")

(require racket/pretty)
(require racket/list)
(require racket/match)
(require racket/function)

(provide Protocol-dump)

(define server-header "\
#lang racket/base

;;; NOTE: THIS IS AN AUTOGENERATED FILE

(require ffi/unsafe ffi/unsafe/define)
(require wayland-0/generated/libwayland-server
         wayland-0/util
         wayland-0/private
         wayland-0/server)

(define-ffi-definer define-wl-server libwayland-server)
")

(define client-header "\
#lang racket/base

;;; NOTE: THIS IS AN AUTOGENERATED FILE

(require ffi/unsafe ffi/unsafe/define)

(require wayland-0/generated/libwayland-client
         typed/wayland-0/errno
         wayland-0/util
         wayland-0/private
         wayland-0/client)

(define-ffi-definer define-wl-client libwayland-client)
")

(define (server?->string server?) (if server? "server" "client"))

(define (interface-module i server?)
  (string->symbol
   (format "wayland-0/generated/~a-~a"
           (Interface-name i)
           (server?->string server?))))

(define (interface-name-filename name server?)
  (format "~a-~a.rkt" name (server?->string server?)))

(define (interface-filename i server?)
  (interface-name-filename (Interface-name i) server?))

(define (interface-path i server?)
  (format "wayland-0/generated/~a" (interface-filename i server?)))

(define (interface-typed-path i server?)
  (format "typed/wayland-0/generated/~a" (interface-filename i server?)))

(define (interface-name->object-descriptor-name s)
  (format "~a_interface" s))

(define (object-predicate-name i)
  (string-append (Interface-name i) "?"))

(define (object-descriptor-name i)
  (interface-name->object-descriptor-name (Interface-name i)))

(define (object-client-interface-name i)
  (format "~a_listener" (Interface-name i)))
(define (object-client-interface-type-name i)
  (format "_~a" (object-client-interface-name i)))
(define (object-client-interface-pointer-name i)
  (format "~a-pointer" (object-client-interface-type-name i)))
(define (object-client-interface-pointer/null-name i)
  (format "~a/null" (object-client-interface-pointer-name i)))

(define (object-add-listener-name i)
  (format "~a-add-listener" (Interface-name i)))

(define (object-get-listener-name i)
  (format "~a-get-listener" (Interface-name i)))

;; NOTE: struct _*_interface in C.
(define (object-server-interface-name i)
  (format "~a_implementation" (Interface-name i)))
(define (object-server-interface-type-name i)
  (format "_~a" (object-server-interface-name i)))
(define (object-server-interface-pointer-name i)
  (format "~a-pointer" (object-server-interface-type-name i)))
(define (object-server-interface-pointer/null-name i)
  (format "~a/null" (object-server-interface-pointer-name i)))

(define (opcode-name i m)
  (format "~a-~a-opcode" (Interface-name i) (Message-name m)))

(define (opcode-version-name i m)
  (format "~a-~a-since-version" (Interface-name i) (Message-name m)))

(define (event-wrapper-name i m)
  (format "~a-send-~a" (Interface-name i) (Message-name m)))

(define (set-user-data-name i)
  (format "~a-set-user-data" (Interface-name i)))

(define (get-user-data-name i)
  (format "~a-get-user-data" (Interface-name i)))

(define (Interface-destroy-name i)
  (format "~a-destroy" (Interface-name i)))

(define (stub-name i m)
  (format "~a-~a" (Interface-name i) (Message-name m)))

(define (Protocol-dump p client-test-out server-test-out)
  (for ((i (Protocol-interfaces p)))
    (Interface-dump i #f client-test-out)
    (Interface-dump i #t server-test-out)))

(define (Interface-dump i server? test-out)
  (pretty-write `(require ,(interface-module i server?)) test-out)
  (call-with-output-file
    (interface-path i server?)
    (curry Interface-dump* i server?)
    #:mode 'text #:exists 'replace)
  (when (not server?)
    (call-with-output-file
      (interface-typed-path i server?)
      (curry interface-typed-client-dump i)
      #:mode 'text #:exists 'replace)))

(define (get-requires i server?)
  (map
   (lambda (name) (interface-name-filename name server?))
   (remove (Interface-name i) (interface-interfaces i))))

(define (get-provides i server?)
  (define request-messages (map Request-message (Interface-requests i)))
  (define event-messages (map Event-message (Interface-events i)))

  (if server?
      ;; server
      (append
       (list (interface-ffi-pointer i)
             (interface-ffi-pointer/null i)
             (object-descriptor-name i))
       (if (empty? request-messages)
           '()
           `(struct-out ,(object-server-interface-name i)))
       (for/list ((m event-messages))
         (opcode-name i m))
       (for/list ((m event-messages))
         (opcode-version-name i m))

       (if (string=? (Interface-name i) "wl_display")
           ;; NOTE: wl_display functions should be hand written.
           '()
           (for/list ((m event-messages))
             ;; server event wrappers
             (event-wrapper-name i m))))
      ;; client
      (append
       (list (object-predicate-name i)
             (interface-ffi-pointer i)
             (interface-ffi-pointer/null i)
             (object-descriptor-name i))
       (if (empty? event-messages)
           '()
           (list
            `(struct-out ,(object-client-interface-name i))
            (object-add-listener-name i)
            (object-get-listener-name i)))
       (for/list ((m request-messages))
         (opcode-name i m))
       (list (set-user-data-name i) (get-user-data-name i))
       (if (and (not (interface-has-destroy-message i))
                (not (string=? (Interface-name i) "wl_display")))
           (list (Interface-destroy-name i))
           '())
       (for/list ((m request-messages)) (stub-name i m))
       )))

(define (Interface-dump* i server? out)
  (match i
    ((Interface (and about (About what name summary description)) ver requests events enums)
     (define event-messages (map Event-message events))
     (define request-messages (map Request-message requests))

     (display (if server? server-header client-header) out)

     (define requires (get-requires i server?))
     (when (not (empty? requires))
       (newline out)
       (pretty-write `(require ,@requires) out))

     (pretty-display `(provide ,@(get-provides i server?)) out)

     (newline out)
     (pretty-display
      `(define (,(object-predicate-name i) x)
         (and
          (cpointer? x)
          (cpointer-has-tag? x ',(Interface-name i))))
      out)
     (pretty-display
      `(define ,(interface-ffi-pointer i) (_cpointer ',(Interface-name i)))
      out)
     (pretty-display
      `(define ,(interface-ffi-pointer/null i) (_cpointer/null ',(Interface-name i)))
      out)

     (if server?
         (pretty-display
          `(define-wl-server ,(object-descriptor-name i) _wl_interface)
          out)
         (pretty-display
          `(define-wl-client ,(object-descriptor-name i) _wl_interface)
          out))

     (for ((e enums))
       (Enum-dump e name out))

     (let ((interface-type-name
            (if server?
                (object-server-interface-type-name i)
                (object-client-interface-type-name i)))
           (messages (if server? request-messages event-messages)))
       (unless (empty? messages)
         (newline out)
         (if summary
             (fprintf out ";;; ~a â€” ~a\n" name summary)
             (fprintf out ";;; ~a\n" name))
         (for ((m messages)) (Message-dump-comment m name server? out))

         (when server?
           (fprintf out ";;;
;;; NOTE: _~a_interface in C is _~a_implementation in racket due to a
;;; name clash, and anyway it is confusing to overload the name.\n"
                    name name))

         (pretty-display
          `(define-cstruct ,interface-type-name
             ,(for/list ((m messages))
                (list
                 (Message-name m)
                 (Message-type-form m i server?)))
             #:malloc-mode 'raw)
          out)))

     (when (and (not server?)
                (not (empty? event-messages)))
       (newline out)
       (pretty-display
        `(define (,(object-add-listener-name i) ,(Interface-name i) listener data)
           (wl_proxy_add_listener
            (cast ,(Interface-name i) ,(interface-ffi-pointer i) _wl_proxy-pointer)
            listener
            data))
        out)

       (newline out)
       (pretty-display
        `(define (,(object-get-listener-name i) ,(Interface-name i))
           (cast
            (wl_proxy_get_listener
             (cast ,(Interface-name i) ,(interface-ffi-pointer i) _wl_proxy-pointer))
            _pointer
            ,(object-client-interface-pointer/null-name i)))
        out))

     ;; Emit opcodes
     (let ((messages (if server? event-messages request-messages)))
       (unless (empty? messages)
         (newline out))
       (for ((opcode (in-naturals))
             (message messages))
         (pretty-display `(define ,(opcode-name i message) ,opcode) out)))

     (when server?
       ;; Emit opcode versions
       (unless (empty? event-messages)
         (newline out)
         (for ((message event-messages))
           (pretty-display `(define ,(opcode-version-name i message) ,(Message-since message))
                           out)))

       ;; server event wrappers
       (for ((m event-messages))
         ;; NOTE: wl_display functions should be hand written.
         (unless (string=? name "wl_display")
           (Message-wrapper m i out))))

     (when (not server?)
       (newline out)

       (define upcast-to-wl_proxy
         `(cast ,name ,(interface-name->ffi-pointer name) _wl_proxy-pointer))

       (pretty-display
        `(define (,(set-user-data-name i) ,name user-data)
           (wl_proxy_set_user_data ,upcast-to-wl_proxy user-data))
        out)
       (newline out)
       (pretty-display
        `(define (,(get-user-data-name i) ,name)
           (wl_proxy_set_user_data ,upcast-to-wl_proxy))
        out)

       (when (and (not (interface-has-destroy-message i))
                  (not (string=? name "wl_display")))
         (newline out)
         (pretty-display
          `(define (,(Interface-destroy-name i) ,name)
             (wl_proxy_destroy ,upcast-to-wl_proxy))
          out))
       (for ((m request-messages))
         (Message-stub m i out)))

     )))

(define (Message-type-form m interface server?)
  (match m
    ((Message (About what message-name summary description) destructor? since args)
     `(_fun
       ,@(reverse
          (for/fold ((types (reverse
                             (if server?
                                 (list '_wl_client-pointer '_wl_resource-pointer)
                                 (list '_pointer (interface-ffi-pointer interface))))))
                    ((arg (Message-args m)))
            (match arg
              ((Arg about type summary interface-name allow-null)
               (cond ((and server? (equal? type "object"))
                      (cons '_wl_resource-pointer types))
                     ((and server? (equal? type "new_id") (not interface-name))
                      (append (reverse '(_string/utf-8 _uint32 _uint32)) types))
                     ((and (not server?) (equal? type "object") (not interface-name))
                      (cons '_pointer types))
                     ((and (not server?) (equal? type "new_id"))
                      (cons (format "_~a-pointer" interface-name) types))
                     (else
                      (cons (Arg-type-form arg) types)))))))

       -> _void))))

(define (Message-dump-comment m interface-name server? out)
  (match m
    ((Message (About what message-name summary description) destructor? since args)
     ;; (define name (format "~a-~a" interface-name message-name))
     (if summary
         (fprintf out ";;;   ~a â€” ~a\n" message-name summary)
         (fprintf out ";;;   ~a\n" message-name))
     (for ((arg args))
       (match arg
         ((Arg (About what arg-name desc-summary description) type arg-summary interface-name allow-null)
          (when (and server? (equal? type "new_id") (not interface-name))
            (fprintf out ";;;     interface â€” name of the object's interface\n")
            (fprintf out ";;;     version â€” version of the object's interface\n"))
          (if arg-summary
              (fprintf out ";;;     ~a â€” ~a\n" arg-name arg-summary)
              (fprintf out ";;;     ~a\n" arg-name)))))
     (when (> since 1)
       (fprintf out ";;;   since: ~a\n" since)))))

(define (Message-wrapper m interface out)
  (newline out)
  (match m
    ((Message (About what message-name summary description) destructor? since args)
     (pretty-display
      `(define (,(event-wrapper-name interface m)
                resource_
                ,@(map Arg-name args))
         (wl_resource_post_event resource_ ,(opcode-name interface m) ,@(map Arg-name args)))
      out))))

(define (gen-initialize-arg-form type index init-form)
  (match type
    ("int" `(set-wl_argument-i! (ptr-ref args _wl_argument ,index) ,init-form))
    ("uint" `(set-wl_argument-u! (ptr-ref args _wl_argument ,index) ,init-form))
    ("fixed" `(set-wl_argument-f! (ptr-ref args _wl_argument ,index) ,init-form))
    ("string" `(set-wl_argument-s! (ptr-ref args _wl_argument ,index) ,init-form))
    ("array" `(set-wl_argument-a! (ptr-ref args _wl_argument ,index) ,init-form))
    ("fd" `(set-wl_argument-h! (ptr-ref args _wl_argument ,index) ,init-form))
    ("new_id" `(set-wl_argument-o! (ptr-ref args _wl_argument ,index) ,init-form))
    ("object" `(set-wl_argument-o! (ptr-ref args _wl_argument ,index) ,init-form))))

(define (Message-stub m interface out)
  (newline out)
  (match m
    ((Message (About what message-name summary description) destructor? since args)

     (define param-names (reverse
                          (for/fold ((reverse-args '()))
                                    ((a args))
                            (match a
                              ((struct* Arg ((type "new_id") (interface-name #f)))
                               (append (reverse '(interface version)) reverse-args))
                              ((struct* Arg ((type "new_id")))
                               reverse-args)
                              (_
                               (cons (Arg-name a) reverse-args))))))

     (define arg-count
       (for/fold ((arg-count 0))
                 ((a args))
         (+ arg-count
            (match a
              ((struct* Arg ((type "new_id") (interface-name #f))) 3)
              ((struct* Arg ((type "new_id"))) 1)
              (_ 1)))))

     (define new-id-arg?
       (for/or ((a args)) (and (string=? (Arg-type a) "new_id") a)))

     (define allocate-args-form
       `(define args (cast (malloc 'raw (* ,arg-count (ctype-sizeof _wl_argument)))
                           _pointer
                           _wl_argument-pointer)))

     (define initialize-args-forms
       (let-values
           (((end-index reverse-forms)
             (for/fold ((index 0)
                        (forms '()))
                       ((a args))
               (match a
                 ((struct* Arg ((type "new_id") (interface-name #f)))
                  (values
                   (+ index 3)
                   (append
                    (reverse
                     (list
                      (gen-initialize-arg-form "int" index '(wl_interface-name interface))
                      (gen-initialize-arg-form "uint" (+ index 1) 'version)
                      (gen-initialize-arg-form "new_id" (+ index 2) #f)))
                    forms)))
                 ((struct* Arg ((type "new_id")))
                  (values
                   (+ index 1)
                   (cons (gen-initialize-arg-form "new_id" index #f) forms)))
                 ((struct* Arg ((about (struct* About ((name arg-name)))) (type type)))
                  (values
                   (+ index 1)
                   (cons (gen-initialize-arg-form type index arg-name) forms)))))))
         (reverse reverse-forms)))

     (pretty-display
      `(define (,(stub-name interface m) ,(Interface-name interface) ,@param-names)
         ,allocate-args-form
         ,@initialize-args-forms
         ,(match new-id-arg?
            ((struct* Arg ((about (struct* About ((name arg-name))))
                           (interface-name interface-name)))
              `(define ,arg-name
                 (wl_proxy_marshal_array_constructor
                  (cast ,(Interface-name interface)
                        ,(interface-ffi-pointer interface)
                        _wl_proxy-pointer)
                  ,(opcode-name interface m)
                  args
                  ,(if interface-name
                       (interface-name->object-descriptor-name interface-name)
                       "interface"))))
            (_
             `(wl_proxy_marshal_array
               ,(Interface-name interface)
               ,(opcode-name interface m)
               args)))
         (free args)
         ,@(if destructor?
               `((wl_proxy_destroy ,(Interface-name interface)))
               '())
         ,(match new-id-arg?
            ((struct* Arg ((about (struct* About ((name arg-name))))
                           (interface-name interface-name)))
             `(or ,(if interface-name
                       `(cast ,arg-name _wl_proxy-pointer/null
                              ,(interface-name->ffi-pointer/null interface-name))
                       arg-name)
                  (get-errno)))
            (_
             '(void))))

      out)

     )))

(define (Enum-dump e interface-name out)
  (match e
    ((Enum (About what enum-name summary description) since entries)
     (define name (format "~a-~a" interface-name enum-name))

     (newline out)

     (if summary
         (fprintf out ";;; enum ~a â€” ~a\n" name summary)
         (fprintf out ";;; enum ~a\n" name))

     (for ((entry entries))
       (Entry-dump-comment entry name out))

     (for ((entry entries))
       (Entry-dump entry name out)))))

(define (Arg-type-form a)
  (match a
    ((Arg (About what name about-summary description)
           type arg-summary interface-name allow-null)
     (match type
       ("int" '_int32)
       ("uint" '_uint32)
       ("fixed" '_wl_fixed)
       ("string" '_string/utf-8)
       ("array" '_wl_array-pointer)
       ("fd" '_int32)
       ("new_id" '_uint32)
       ("object" (string->symbol (format "_~a-pointer" interface-name)))))))

(define (Entry-dump-comment e prefix out)
  (match e
    ((Entry (About what entry-name about-summary description) value summary since)
     (if summary
         (fprintf out ";;;   ~a â€” ~a\n" entry-name summary)
         (fprintf out ";;;   ~a\n" entry-name)))))

(define (Entry-dump e prefix out)
  (match e
    ((Entry (About what entry-name about-summary description) value summary since)
     (define name (format "~a-~a" prefix entry-name))

     (pretty-display `(define ,name ,value) out))))
