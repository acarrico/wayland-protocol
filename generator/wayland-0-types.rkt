#lang at-exp racket/base

(require "wayland-ast.rkt")
(require racket/pretty)
(require racket/list)
(require racket/match)
(require racket/function)
(require racket/format)
(require racket/string)

(provide interface-typed-client-dump)

(struct Comment (text)
  #:methods gen:custom-write
  ((define (write-proc comment out mode)
     (display @~a{; @|(Comment-text comment)|
                  } out))))

(struct Comment2 (text)
  #:methods gen:custom-write
  ((define (write-proc comment out mode)
     (display @~a{;; @|(Comment2-text comment)|
                  } out))))

(struct BlockComment (text)
  #:methods gen:custom-write
  ((define (write-proc comment out mode)
     (display @~a{#|@|(BlockComment-text comment)||#} out))))

(define (predicate-id i)
  (string->symbol
   @~a{@(interface-id i)?}))

(define (downcast-id i)
  (string->symbol
   @~a{pointer->@(interface-id i)}))

(define (handlers-type-id i)
  (string->symbol
   @~a{@(interface-type-id i)Handlers}))

(define (handlers-id i)
  (string->symbol
   @~a{@(interface-id i)-handlers}))

(define (get-handler-id i field-name)
  (string->symbol
   @~a{@(interface-id i)-handlers-@|field-name|}))

(define (listener-type-id i)
  (string->symbol
   @~a{@(interface-type-id i)Listener}))

(define (listener-id i)
  (string->symbol
   @~a{@(interface-id i)-listener}))

(define (listener-predicate-id i)
  (string->symbol
   @~a{@(listener-id i)?}))

(define (listener-constructor-untyped-id i)
  (string->symbol @~a{make-@(Interface-name i)_listener}))

(define listener-constructor-id listener-id)

(define (add-listener-untyped-id i)
  (string->symbol @~a{@(Interface-name i)-add-listener}))

(define (add-listener-id i)
  (string->symbol @~a{@(interface-id i)-add-listener}))

(define (set-handlers-id i)
  (string->symbol @~a{@(interface-id i)-set-handlers}))

(define (get-listener-untyped-id i)
  (string->symbol @~a{@(Interface-name i)-get-listener}))

(define (get-listener-id i)
  (string->symbol @~a{@(interface-id i)-get-listener}))

(define (destroy-untyped-id i)
  (string->symbol @~a{@(Interface-name i)-destroy}))

(define (destroy-id i)
  (string->symbol @~a{@(interface-id i)-destroy}))

(define (message-stub-untyped-id i m)
  (string->symbol
   (format "~a-~a" (Interface-name i) (Message-name m))))

(define (message-stub-id i m)
  ;; NOTE: special case destructor, because it will be wrapped:
  (if (Message-destructor? m)
      (message-stub-untyped-id i m)
      (string->symbol
       (format "~a-~a"
               (interface-id i)
               (string-replace (Message-name m) "_" "-")))))

(define (message-handler-sig i m)
  (match-define (Message (About what message-name summary description) destructor? since args) m)
  `(-> Pointer
       ,(interface-type-id i)
       ,@(map (lambda (arg)
                (match-define (Arg about type summary interface-name allow-null) arg)
                (cond ((and (equal? type "object") (not interface-name))
                       'Pointer)
                      ((equal? type "new_id")
                       (interface-name->type interface-name))
                      (else
                       (arg-trtype arg))))
              (Message-args m))
       Void))

(define (interface-typed-client-dump i out)
  (match-define (Interface (About what name summary description) version requests events enums) i)
  (define requires
    (map interface-name->typed-client-module (interface-interfaces i)))

  (define provides
    (append
     (list
      (interface-type-id i)
      (predicate-id i)
      (downcast-id i)
      )
     (map (lambda (r)
            (message-stub-id i (Request-message r)))
          requests)
     (if (string=? (Interface-name i) "wl_display")
         ;; NOTE: wl_display is destroyed by disconnect, and its
         ;; handlers are static C functions:
         (list)
         (append
          (list
           (destroy-id i)
           ;; Listener memory management is in destuctor, so none of the
           ;; listener api needs to be provided, except setting the
           ;; handlers:
           #;(listener-type-id i)
           #;(listener-predicate-id i)
           #;(listener-constructor-id i)
           #;(add-listener-id i)
           #;(get-listener-id i)
           (handlers-type-id i)
           `(struct-out ,(handlers-id i))
           (set-handlers-id i))
          (map (lambda (e)
                 (message-handler-type-id i (Event-message e)))
               events)))))

  (define untyped-module @(interface-untyped-client-module i))

  (display @~a{#lang typed/racket/base

               ;;; NOTE: THIS IS AN AUTOGENERATED FILE

               (require typed/racket/unsafe
                        racket/match
                        typed/wayland-0/errno
                        typed/wayland-0/common)

               }
           out)

  (unless (empty? requires)
    (pretty-write `(require ,@requires) out))

  (newline out)
  (pretty-write `(provide ,@provides) out)

  (display @~a{

               (unsafe-require/typed @|untyped-module|
                (#:opaque @(interface-type-id i) @(Interface-name i)?))

               (define @(predicate-id i) (make-predicate @(interface-type-id i)))

               (module downcast racket/base
                 (provide @(downcast-id i))
                 (require ffi/unsafe @|untyped-module|)
                 (define (@(downcast-id i) p)
                   (cast p _pointer @(interface-ffi-pointer i))))

               (require/typed 'downcast
                 (@(downcast-id i) (-> Pointer @(interface-type-id i))))

               }
           out)

  (unless (string=? (Interface-name i) "wl_display")
    (display @~a{

                 (unsafe-require/typed @|untyped-module|
                                       (#:opaque @(listener-type-id i) @|name|_listener?))

                 (define @(listener-predicate-id i)
                   (make-predicate @(listener-type-id i)))

                 }
             out)

    (define handler-names
      (map (compose string->symbol Message-name Event-message)
           (Interface-events i)))

    (define handler-types
      (map (compose (curry message-handler-type-id i) Event-message)
           (Interface-events i)))

    (define handler-annotations
      (map (lambda (name type) `(,name : ,type))
           handler-names handler-types))

    (newline out)
    (pretty-write
     `(require/typed ,(interface-untyped-client-module i)
        ,(Comment2 "ISSUE: importing c structs doesn't seem to work:")
        ((,(listener-constructor-untyped-id i) ,(listener-constructor-id i))
         (-> ,@handler-types ,(listener-type-id i)))
        ((,(add-listener-untyped-id i) ,(add-listener-id i))
         (-> ,(interface-type-id i) ,(listener-type-id i) Pointer Integer))
        ((,(get-listener-untyped-id i) ,(get-listener-id i))
         (-> ,(interface-type-id i) (Option ,(listener-type-id i)))))
     out)

    (newline out)
    (pretty-write
     `(struct ,(handlers-id i)
        ,handler-annotations
        #:transparent
        #:type-name ,(handlers-type-id i))
     out)

    (newline out)
    (pretty-write
     `(: ,(set-handlers-id i)
         (-> ,(interface-type-id i) ,(handlers-type-id i) Pointer (Option ErrorProxyHasHandlers)))
     out)

    (newline out)
    (pretty-write
     `(define (,(set-handlers-id i) object handlers data)
        (define listener (,(listener-constructor-id i)
                          ,@(map (lambda (name) `(,(get-handler-id i name) handlers)) handler-names)))
        (define result (,(add-listener-id i) object listener data))
        (match result
          (0 #f)
          (-1
           (free (cast listener Pointer))
           (error-proxy-has-handlers))))
     out)

    (for ((e events))
      (gen-event e i out))
    )

  (gen-destructors i out)

  (for ((r requests))
    (gen-request r i out))

  (newline out)
)

(define (gen-destructors i out)
  ;; NOTE:
  ;; * wl_display is a special case with connect/disconnect:
  (unless (string=? (Interface-name i) "wl_display")
    ;; * Some Wayland objects have a destructor message in their
    ;; interface. These are generated with the requests.
    ;;
    ;; * The remaining Wayland objects have only proxy destructors which
    ;; are generated here:
    (unless (interface-has-destroy-message i)
      (newline out)
      (pretty-write
       `(require/typed ,(interface-untyped-client-module i)
          (,(destroy-untyped-id i)
           (-> ,(interface-type-id i) Void)))
       out))
    ;; * The untyped destructors are wrapped here to add any hooks
    ;; necessary. Currently that means destroying the listener data
    ;; structure:
    (newline out)
    (pretty-write
     `(: ,(destroy-id i) (-> ,(interface-type-id i) Void))
     out)
    (newline out)
    (pretty-write
     `(define (,(destroy-id i) object)
        (define listener (,(get-listener-id i) object))
        (,(destroy-untyped-id i) object)
        (when listener (free (cast listener Pointer)))
        (void))
     out)))

(define (interface-name->object-descriptor-name s)
  (format "~a_interface" s))

(define (opcode-name i m)
  (format "~a-~a-opcode" (Interface-name i) (Message-name m)))

(define (gen-initialize-arg-form type index init-form)
  (match type
    ("int" `(set-wl_argument-i! (ptr-ref args _wl_argument ,index) ,init-form))
    ("uint" `(set-wl_argument-u! (ptr-ref args _wl_argument ,index) ,init-form))
    ("fixed" `(set-wl_argument-f! (ptr-ref args _wl_argument ,index) ,init-form))
    ("string" `(set-wl_argument-s! (ptr-ref args _wl_argument ,index) ,init-form))
    ("array" `(set-wl_argument-a! (ptr-ref args _wl_argument ,index) ,init-form))
    ("fd" `(set-wl_argument-h! (ptr-ref args _wl_argument ,index) ,init-form))
    ("new_id" `(set-wl_argument-o! (ptr-ref args _wl_argument ,index) ,init-form))
    ("object" `(set-wl_argument-o! (ptr-ref args _wl_argument ,index) ,init-form))))

(define (new-id-arg-result-type a)
  (define name (Arg-interface-name a))
  (if name
      `(U ,(interface-name->type name) Errno)
      '(U Proxy Errno)))

(define (gen-request r i out)
  (define m (Request-message r))
  (newline out)

  (match-define (Message (About what message-name summary description) destructor? since args) m)

  (define new-id-arg?
    (for/or ((a args)) (and (arg-new-id? a) a)))

  (define signature
    (append
     '(->)
     (list (interface-type-id i))
     (append*
      (map (lambda (a)
             (list (BlockComment (Arg-name a))
                   (arg-trtype a)))
           (filter (compose not arg-new-id?) args)))
     (if (message-bind? m) `(Interface Version) '())
     (if new-id-arg?
         (list (new-id-arg-result-type new-id-arg?))
         '(Void))))

  (pretty-write
   `(require/typed ,(interface-untyped-client-module i)
      ((,(message-stub-untyped-id i m) ,(message-stub-id i m)) ,signature))
   out))

(define (gen-event e i out)
  (define m (Event-message e))
  (newline out)
  (pretty-write
   `(define-type ,(message-handler-type-id i m) ,(message-handler-sig i m))
   out))
